#!/usr/bin/env python3
"""Check how many days a certificate of one or more sites is valid."""

import argparse
import datetime
import socket
import ssl

def connect_and_compute_expiry(hostname: str, timeout: int = 10) -> datetime.timedelta:
    """Connect to hostname and return a time delta of certificates' notAfter"""
    context = ssl.create_default_context()
    with socket.create_connection((hostname, 443), timeout) as sock:
        with context.wrap_socket(sock, server_hostname=hostname) as ssock:
            cert = ssock.getpeercert()
            # subject, commonName, issuer, notBefore, notAfter,
            # subjectAltName, OCSP, caIssuers, crlDistributionPoints
            not_after = datetime.datetime.strptime(
                cert['notAfter'],
                '%b %d %H:%M:%S %Y %Z'
            )
            return not_after.replace(tzinfo=datetime.timezone.utc) - datetime.datetime.now(datetime.timezone.utc) 

def compute_expiration_of_site(hostname: str) -> str:
    """Return human readable expire date information."""
    try:
        expire_date = connect_and_compute_expiry(hostname)
    except Exception as e:
        return f"*** computation failed: {e} ***"
    if expire_date < datetime.timedelta(days=0):
        return "expired"
    return f"expires in {expire_date.days} days"

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Check SSL certificate expiration for given hostnames.")
    parser.add_argument('sites', metavar='SITE', type=str, nargs='+', help='Hostname to check')
    args = parser.parse_args()
    for site in args.sites:
        print(f"{site} {compute_expiration_of_site(site)}")
